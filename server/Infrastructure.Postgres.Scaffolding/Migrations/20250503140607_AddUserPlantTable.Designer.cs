// <auto-generated />
using System;
using Infrastructure.Postgres.Scaffolding;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Postgres.Scaffolding.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250503140607_AddUserPlantTable")]
    partial class AddUserPlantTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Domain.Entities.Plant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<bool>("IsAutoWateringEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_auto_watering_enabled");

                    b.Property<float>("MoistureLevel")
                        .HasColumnType("real")
                        .HasColumnName("moisture_level");

                    b.Property<float>("MoistureThreshold")
                        .HasColumnType("real")
                        .HasColumnName("moisture_threshold");

                    b.Property<string>("PlantName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plant_name");

                    b.Property<string>("PlantType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plant_type");

                    b.HasKey("Id")
                        .HasName("plant_pkey");

                    b.ToTable("plant", "plants");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("salt");

                    b.HasKey("Id")
                        .HasName("user_pkey");

                    b.ToTable("user", "plants");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserPlant", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("PlantId")
                        .HasColumnType("text")
                        .HasColumnName("plant_id");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("boolean")
                        .HasColumnName("is_owner");

                    b.HasKey("UserId", "PlantId")
                        .HasName("user_plant_pkey");

                    b.HasIndex("PlantId");

                    b.ToTable("user_plant", "plants");
                });

            modelBuilder.Entity("Core.Domain.Entities.WateringLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("method");

                    b.Property<float>("MoistureAfter")
                        .HasColumnType("real")
                        .HasColumnName("moisture_after");

                    b.Property<float>("MoistureBefore")
                        .HasColumnType("real")
                        .HasColumnName("moisture_before");

                    b.Property<string>("PlantId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("plant_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("TriggeredByUserId")
                        .HasColumnType("text")
                        .HasColumnName("triggered_by_user_id");

                    b.HasKey("Id")
                        .HasName("watering_log_pkey");

                    b.HasIndex("PlantId");

                    b.HasIndex("TriggeredByUserId");

                    b.ToTable("watering_log", "plants");
                });

            modelBuilder.Entity("Core.Domain.Entities.UserPlant", b =>
                {
                    b.HasOne("Core.Domain.Entities.Plant", "Plant")
                        .WithMany("UserPlants")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "User")
                        .WithMany("UserPlants")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domain.Entities.WateringLog", b =>
                {
                    b.HasOne("Core.Domain.Entities.Plant", "Plant")
                        .WithMany("WateringLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domain.Entities.User", "TriggeredByUser")
                        .WithMany()
                        .HasForeignKey("TriggeredByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Plant");

                    b.Navigation("TriggeredByUser");
                });

            modelBuilder.Entity("Core.Domain.Entities.Plant", b =>
                {
                    b.Navigation("UserPlants");

                    b.Navigation("WateringLogs");
                });

            modelBuilder.Entity("Core.Domain.Entities.User", b =>
                {
                    b.Navigation("UserPlants");
                });
#pragma warning restore 612, 618
        }
    }
}
